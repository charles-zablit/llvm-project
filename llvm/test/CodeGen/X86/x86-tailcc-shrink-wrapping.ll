; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -o - < %s | FileCheck %s

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "x86_64-apple-macosx"

; Pseudo-expansion's handling of tail-calls currently interacts badly
; with shrink-wrapping when using callee-pop CCs on x86_64, resulting
; in an unbalanced RSP adjustment on shrink-wrapped return paths.

; Make sure it's disabled today until that's resolved.

; See https://github.com/llvm/llvm-project/issues/109279

define tailcc void @test_shrink_wrap_tailcc(i64 %0) {
; CHECK-LABEL: test_shrink_wrap_tailcc:
; CHECK:       ## %bb.0:
; CHECK-NEXT:    subq $32, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 40
; CHECK-NEXT:    testq %rdi, %rdi
; CHECK-NEXT:    je LBB0_2
; CHECK-NEXT:  ## %bb.1: ## %a
; CHECK-NEXT:    xorps %xmm0, %xmm0
; CHECK-NEXT:    movaps %xmm0, {{[0-9]+}}(%rsp)
; CHECK-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; CHECK-NEXT:    movaps %xmm0, {{[0-9]+}}(%rsp)
; CHECK-NEXT:    movq %rax, (%rsp)
; CHECK-NEXT:    movl $16, %esi
; CHECK-NEXT:    xorl %edi, %edi
; CHECK-NEXT:    xorl %edx, %edx
; CHECK-NEXT:    movl $1, %ecx
; CHECK-NEXT:    xorl %r8d, %r8d
; CHECK-NEXT:    xorl %r9d, %r9d
; CHECK-NEXT:    jmp _f1 ## TAILCALL
; CHECK-NEXT:  LBB0_2: ## %b
; CHECK-NEXT:    addq $32, %rsp
; CHECK-NEXT:    jmp _f2 ## TAILCALL
  %cond = icmp ugt i64 %0, 0
  br i1 %cond, label %a, label %b
a:
  musttail call tailcc void @f1(ptr null, i64 16, ptr null, i8 1, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null)
  ret void
b:
  musttail call tailcc void @f2()
  ret void
}

declare tailcc void @f2()
declare tailcc void @f1(ptr, i64, ptr, i8, ptr, ptr, ptr, ptr, ptr, ptr)

define swifttailcc void @test_shrink_wrap_swifttailcc(i64 %0) {
; CHECK-LABEL: test_shrink_wrap_swifttailcc:
; CHECK:       ## %bb.0:
; CHECK-NEXT:    subq $32, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 40
; CHECK-NEXT:    testq %rdi, %rdi
; CHECK-NEXT:    je LBB1_2
; CHECK-NEXT:  ## %bb.1: ## %a
; CHECK-NEXT:    xorps %xmm0, %xmm0
; CHECK-NEXT:    movaps %xmm0, {{[0-9]+}}(%rsp)
; CHECK-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; CHECK-NEXT:    movaps %xmm0, {{[0-9]+}}(%rsp)
; CHECK-NEXT:    movq %rax, (%rsp)
; CHECK-NEXT:    movl $16, %esi
; CHECK-NEXT:    xorl %edi, %edi
; CHECK-NEXT:    xorl %edx, %edx
; CHECK-NEXT:    movl $1, %ecx
; CHECK-NEXT:    xorl %r8d, %r8d
; CHECK-NEXT:    xorl %r9d, %r9d
; CHECK-NEXT:    jmp _sf1 ## TAILCALL
; CHECK-NEXT:  LBB1_2: ## %b
; CHECK-NEXT:    addq $32, %rsp
; CHECK-NEXT:    jmp _sf2 ## TAILCALL
  %cond = icmp ugt i64 %0, 0
  br i1 %cond, label %a, label %b
a:
  musttail call swifttailcc void @sf1(ptr null, i64 16, ptr null, i8 1, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null)
  ret void
b:
  musttail call swifttailcc void @sf2()
  ret void
}

declare swifttailcc void @sf2()
declare swifttailcc void @sf1(ptr, i64, ptr, i8, ptr, ptr, ptr, ptr, ptr, ptr)

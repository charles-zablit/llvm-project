; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -verify-machineinstrs -mtriple arm64e-apple-darwin -o - %s | FileCheck %s --check-prefixes=CHECK,SDISEL
; RUN: llc -verify-machineinstrs -mtriple arm64e-apple-darwin -global-isel -global-isel-abort=1 -o - %s | FileCheck %s --check-prefixes=CHECK,GISEL

declare i64 @g(ptr, ptr)

define swiftcorocc i64 @test_intrin_basic() #0 {
; CHECK-LABEL: test_intrin_basic:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    pacibsp
; CHECK-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    .cfi_def_cfa w29, 16
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    add x16, x29, #16
; CHECK-NEXT:    ldp x29, x30, [x29] ; 16-byte Folded Reload
; CHECK-NEXT:    autib x30, x16
; CHECK-NEXT:    ret
  musttail call void @llvm.ret.popless()
  ret i64 0
}

define swiftcorocc i64 @test_intrin() #0 {
; CHECK-LABEL: test_intrin:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    pacibsp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    stp x26, x25, [sp, #16] ; 16-byte Folded Spill
; CHECK-NEXT:    stp x29, x30, [sp, #32] ; 16-byte Folded Spill
; CHECK-NEXT:    add x29, sp, #32
; CHECK-NEXT:    .cfi_def_cfa w29, 16
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    .cfi_offset w25, -24
; CHECK-NEXT:    .cfi_offset w26, -32
; CHECK-NEXT:    ; InlineAsm Start
; CHECK-NEXT:    ; InlineAsm End
; CHECK-NEXT:    add x0, sp, #8
; CHECK-NEXT:    mov x1, sp
; CHECK-NEXT:    bl _g
; CHECK-NEXT:    cbz x0, LBB1_2
; CHECK-NEXT:  ; %bb.1: ; %else
; CHECK-NEXT:    add x16, x29, #16
; CHECK-NEXT:    ldp x26, x25, [x29, #-16] ; 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [x29] ; 16-byte Folded Reload
; CHECK-NEXT:    autib x30, x16
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB1_2: ; %then
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload
; CHECK-NEXT:    ldp x26, x25, [sp], #32 ; 16-byte Folded Reload
; CHECK-NEXT:    retab
  %v1 = alloca i64
  %v2 = alloca i64
  call void asm sideeffect "", "~{x25},~{x26}"()
  %v3 = call i64 @g(ptr %v1, ptr %v2)
  %c = icmp eq i64 %v3, 0
  br i1 %c, label %then, label %else
then:
  ret i64 %v3
else:
  musttail call void @llvm.ret.popless()
  ret i64 %v3
}

define swiftcorocc i64 @test_vla(i32 %n) #0 {
; SDISEL-LABEL: test_vla:
; SDISEL:       ; %bb.0:
; SDISEL-NEXT:    pacibsp
; SDISEL-NEXT:    stp x26, x25, [sp, #-32]! ; 16-byte Folded Spill
; SDISEL-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill
; SDISEL-NEXT:    add x29, sp, #16
; SDISEL-NEXT:    .cfi_def_cfa w29, 16
; SDISEL-NEXT:    .cfi_offset w30, -8
; SDISEL-NEXT:    .cfi_offset w29, -16
; SDISEL-NEXT:    .cfi_offset w25, -24
; SDISEL-NEXT:    .cfi_offset w26, -32
; SDISEL-NEXT:    ; kill: def $w0 killed $w0 def $x0
; SDISEL-NEXT:    ubfiz x8, x0, #3, #32
; SDISEL-NEXT:    add x8, x8, #15
; SDISEL-NEXT:    and x8, x8, #0xffffffff0
; SDISEL-NEXT:    mov x9, sp
; SDISEL-NEXT:    sub x0, x9, x8
; SDISEL-NEXT:    mov sp, x0
; SDISEL-NEXT:    mov x9, sp
; SDISEL-NEXT:    sub x1, x9, x8
; SDISEL-NEXT:    mov sp, x1
; SDISEL-NEXT:    ; InlineAsm Start
; SDISEL-NEXT:    ; InlineAsm End
; SDISEL-NEXT:    bl _g
; SDISEL-NEXT:    cbz x0, LBB2_2
; SDISEL-NEXT:  ; %bb.1: ; %else
; SDISEL-NEXT:    add x16, x29, #16
; SDISEL-NEXT:    ldp x26, x25, [x29, #-16] ; 16-byte Folded Reload
; SDISEL-NEXT:    ldp x29, x30, [x29] ; 16-byte Folded Reload
; SDISEL-NEXT:    autib x30, x16
; SDISEL-NEXT:    ret
; SDISEL-NEXT:  LBB2_2: ; %then
; SDISEL-NEXT:    sub sp, x29, #16
; SDISEL-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload
; SDISEL-NEXT:    ldp x26, x25, [sp], #32 ; 16-byte Folded Reload
; SDISEL-NEXT:    retab
;
; GISEL-LABEL: test_vla:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    pacibsp
; GISEL-NEXT:    stp x26, x25, [sp, #-32]! ; 16-byte Folded Spill
; GISEL-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill
; GISEL-NEXT:    add x29, sp, #16
; GISEL-NEXT:    .cfi_def_cfa w29, 16
; GISEL-NEXT:    .cfi_offset w30, -8
; GISEL-NEXT:    .cfi_offset w29, -16
; GISEL-NEXT:    .cfi_offset w25, -24
; GISEL-NEXT:    .cfi_offset w26, -32
; GISEL-NEXT:    mov x8, sp
; GISEL-NEXT:    mov w9, w0
; GISEL-NEXT:    lsl x9, x9, #3
; GISEL-NEXT:    add x9, x9, #15
; GISEL-NEXT:    and x9, x9, #0xfffffffffffffff0
; GISEL-NEXT:    sub x0, x8, x9
; GISEL-NEXT:    mov sp, x0
; GISEL-NEXT:    mov x8, sp
; GISEL-NEXT:    sub x1, x8, x9
; GISEL-NEXT:    mov sp, x1
; GISEL-NEXT:    ; InlineAsm Start
; GISEL-NEXT:    ; InlineAsm End
; GISEL-NEXT:    bl _g
; GISEL-NEXT:    cbz x0, LBB2_2
; GISEL-NEXT:  ; %bb.1: ; %else
; GISEL-NEXT:    add x16, x29, #16
; GISEL-NEXT:    ldp x26, x25, [x29, #-16] ; 16-byte Folded Reload
; GISEL-NEXT:    ldp x29, x30, [x29] ; 16-byte Folded Reload
; GISEL-NEXT:    autib x30, x16
; GISEL-NEXT:    ret
; GISEL-NEXT:  LBB2_2: ; %then
; GISEL-NEXT:    sub sp, x29, #16
; GISEL-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload
; GISEL-NEXT:    ldp x26, x25, [sp], #32 ; 16-byte Folded Reload
; GISEL-NEXT:    retab
  %v1 = alloca i64, i32 %n
  %v2 = alloca i64, i32 %n
  call void asm sideeffect "", "~{x25},~{x26}"()
  %v3 = call i64 @g(ptr %v1, ptr %v2)
  %c = icmp eq i64 %v3, 0
  br i1 %c, label %then, label %else
then:
  ret i64 %v3
else:
  musttail call void @llvm.ret.popless()
  ret i64 %v3
}

attributes #0 = { "ptrauth-returns" }

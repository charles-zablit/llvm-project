; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple arm64e-apple-darwin -verify-machineinstrs -o - %s \
; RUN:   | FileCheck %s

; RUN: llc -mtriple arm64e-apple-darwin -verify-machineinstrs -o - %s \
; RUN:   -global-isel -global-isel-abort=2 | FileCheck %s

declare i64 @g(ptr, ptr)

define i64 @test_call_to_swiftcoro() #0 {
; CHECK-LABEL: test_call_to_swiftcoro:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    pacibsp
; CHECK-NEXT:    stp x26, x25, [sp, #-32]! ; 16-byte Folded Spill
; CHECK-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill
; CHECK-NEXT:    add x29, sp, #16
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa w29, 16
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    .cfi_offset w25, -24
; CHECK-NEXT:    .cfi_offset w26, -32
; CHECK-NEXT:    ; InlineAsm Start
; CHECK-NEXT:    ; InlineAsm End
; CHECK-NEXT:    bl _test_call
; CHECK-NEXT:    sub x0, x29, #24
; CHECK-NEXT:    sub x1, x29, #32
; CHECK-NEXT:    bl _g
; CHECK-NEXT:    sub sp, x29, #16
; CHECK-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload
; CHECK-NEXT:    ldp x26, x25, [sp], #32 ; 16-byte Folded Reload
; CHECK-NEXT:    retab
  %v1 = alloca i64
  %v2 = alloca i64
  call void asm sideeffect "", "~{x25},~{x26}"()
  %v3 = call swiftcorocc i64 @test_call()
  %v4 = call i64 @g(ptr %v1, ptr %v2)
  ret i64 %v4
}

define i64 @test_call_to_normal() #0 {
; CHECK-LABEL: test_call_to_normal:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    pacibsp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    stp x26, x25, [sp, #16] ; 16-byte Folded Spill
; CHECK-NEXT:    stp x29, x30, [sp, #32] ; 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 48
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    .cfi_offset w25, -24
; CHECK-NEXT:    .cfi_offset w26, -32
; CHECK-NEXT:    ; InlineAsm Start
; CHECK-NEXT:    ; InlineAsm End
; CHECK-NEXT:    bl _test_call_normal
; CHECK-NEXT:    add x0, sp, #8
; CHECK-NEXT:    mov x1, sp
; CHECK-NEXT:    bl _g
; CHECK-NEXT:    ldp x29, x30, [sp, #32] ; 16-byte Folded Reload
; CHECK-NEXT:    ldp x26, x25, [sp, #16] ; 16-byte Folded Reload
; CHECK-NEXT:    add sp, sp, #48
; CHECK-NEXT:    retab
  %v1 = alloca i64
  %v2 = alloca i64
  call void asm sideeffect "", "~{x25},~{x26}"()
  %v3 = call i64 @test_call_normal()
  %v4 = call i64 @g(ptr %v1, ptr %v2)
  ret i64 %v4
}

define swiftcorocc i64 @test_call() #0 {
; CHECK-LABEL: test_call:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    pacibsp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    stp x26, x25, [sp, #16] ; 16-byte Folded Spill
; CHECK-NEXT:    stp x29, x30, [sp, #32] ; 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 48
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    .cfi_offset w25, -24
; CHECK-NEXT:    .cfi_offset w26, -32
; CHECK-NEXT:    ; InlineAsm Start
; CHECK-NEXT:    ; InlineAsm End
; CHECK-NEXT:    add x0, sp, #8
; CHECK-NEXT:    mov x1, sp
; CHECK-NEXT:    bl _g
; CHECK-NEXT:    ldp x29, x30, [sp, #32] ; 16-byte Folded Reload
; CHECK-NEXT:    ldp x26, x25, [sp, #16] ; 16-byte Folded Reload
; CHECK-NEXT:    add sp, sp, #48
; CHECK-NEXT:    retab
  %v1 = alloca i64
  %v2 = alloca i64
  call void asm sideeffect "", "~{x25},~{x26}"()
  %v3 = call i64 @g(ptr %v1, ptr %v2)
  ret i64 %v3
}

define i64 @test_call_normal() #0 {
; CHECK-LABEL: test_call_normal:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    pacibsp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    stp x26, x25, [sp, #16] ; 16-byte Folded Spill
; CHECK-NEXT:    stp x29, x30, [sp, #32] ; 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 48
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    .cfi_offset w25, -24
; CHECK-NEXT:    .cfi_offset w26, -32
; CHECK-NEXT:    ; InlineAsm Start
; CHECK-NEXT:    ; InlineAsm End
; CHECK-NEXT:    add x0, sp, #8
; CHECK-NEXT:    mov x1, sp
; CHECK-NEXT:    bl _g
; CHECK-NEXT:    ldp x29, x30, [sp, #32] ; 16-byte Folded Reload
; CHECK-NEXT:    ldp x26, x25, [sp, #16] ; 16-byte Folded Reload
; CHECK-NEXT:    add sp, sp, #48
; CHECK-NEXT:    retab
  %v1 = alloca i64
  %v2 = alloca i64
  call void asm sideeffect "", "~{x25},~{x26}"()
  %v3 = call i64 @g(ptr %v1, ptr %v2)
  ret i64 %v3
}


attributes #0 = { "ptrauth-returns" }
